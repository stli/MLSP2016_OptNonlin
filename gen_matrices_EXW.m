function [EXW1,EXW2] = gen_matrices_EXW(U,M,N,D,p,alphac,aopt)
% generate moment matrices for evaluation of df/dW
% U = W*A = current matrix iterate
% M = number of measurements
% N = number of variables x_n, n \in \{1,...,N\}
% D = max degree of polynomial nonlinearity
% p = characteristic vector of B_p
% alphac = cell of monomial exponent matrices
% aopt = vector of polynomial coefficients

% outputs
% [EXW1,EXW2] : moment matrices to compute dmmse/dW generated by
% expectations of monomials over lp_balls
% := E[ prod_{n=1}^N x_n^(a_n) ], x \sim U( B_p(1) )

% define anonymous functions to evaluate multiple monomial integrals (Lemma 2)
% compute intermediate matrix as input to Gamma function (Lemma 2).
div_ap = @(alpha,p) (alpha)./repmat(p.',size(alpha,1),1);
% compute integrals of multiple monomials
Q = @(alpha,p,N) 2^N/prod(p)*(~any(mod(alpha,2),2)).*prod(gamma(div_ap(alpha+1,p)),2)./gamma(sum(div_ap(alpha+1,p),2)+1);

% compute volume of lp_ball
volBp = Q(zeros(1,N),p,N);

% generate identity matrix
E = eye(N);


% compute EXW1 with EXW1(i,j):= \sum_{d=1}^D d*a_d*x_i*x_j*<u_i,x>^(d-1)
EXW1 = zeros(N,N);
for d = find(abs(aopt(2:end))>=1e-15).' %only loop over nonzero elements
    for n = 1:N
        if d == 1
            % speedup evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            %alpha = zeros(1,N);
            c = 1;
        else
            % use faster evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % [ucoeffs,alpha{d}] = multinom(U(n,:),d-1,'descend');
            % bcoeffs = multinom_coeffs(size(U(n,:),2),d-1,'descend').';
            ucoeffs = prod(repmat(U(n,:),size(alphac{d},1),1).^kron(alphac{d},ones(1,1)),2).';
            bcoeffs = reshape(factorial(d)./prod(factorial(alphac{d}),2),1,size(alphac{d},1));
            c = ucoeffs.*bcoeffs;        
        end
        for m = 1:N
            EXW1(n,m) = EXW1(n,m) + c*d*aopt(d+1)*Q(alphac{d}+ones(size(alphac{d},1),1)*E(n,:)+ones(size(alphac{d},1),1)*E(m,:),p,N)/volBp;
        end
    end
end

% compute EXW1 with EXW1(i,j):= \sum_{d=1}^{2D} d*at_d*x_j*<u_i,x>^(d-1)
% at is sum of anti-diagonals of the matrix (aopt*aopt.').*hankel(0:D,D:2*D)
at = sum( spdiags( flipud( (aopt*aopt.').*hankel(0:D,D:2*D) ), -D:D ), 1).';
EXW2 = zeros(N,N);
for d = find(abs(at(2:end))>=1e-15).' %only loop over nonzero elements
    for n = 1:N
        if d == 1
            % speedup evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            %alpha = zeros(1,N);
            c = 1;
        else
            % use faster evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % [ucoeffs,alpha{d}] = multinom(U(n,:),d-1,'descend');
            % bcoeffs = multinom_coeffs(size(U(n,:),2),d-1,'descend').';
            ucoeffs = prod(repmat(U(n,:),size(alphac{d},1),1).^kron(alphac{d},ones(1,1)),2).';
            bcoeffs = reshape(factorial(d)./prod(factorial(alphac{d}),2),1,size(alphac{d},1));
            c = ucoeffs.*bcoeffs;   
        end
        for m = 1:N
            EXW2(n,m) = EXW2(n,m) + c*at(d+1)*Q(alphac{d}+ones(size(alphac{d},1),1)*E(m,:),p,N)/volBp;
        end
    end
end

end

