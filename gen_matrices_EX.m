function [EX,EX1,EX2] = gen_matrices_EX(U,M,N,D,p,alphac)
% generate moment matrices for evaluation of f
% U = W*A = current matrix iterate
% M = number of measurements
% N = number of variables x_n, n \in \{1,...,N\}
% D = max degree of polynomial nonlinearity
% p = characteristic vector of B_p
% alphac = cell of monomial exponent matrices

% outputs
% [EX,EX1,EX2] : moment matrices to compute mmse generated by
% expectations of monomials over lp_balls
% := E[ prod_{n=1}^N x_n^(a_n) ], x \sim U( B_p(1) )

% define anonymous functions to evaluate multiple monomial integrals (Lemma 2)
% compute intermediate matrix as input to Gamma function (Lemma 2).
div_ap = @(alpha,p) (alpha)./repmat(p.',size(alpha,1),1);
% compute integrals of multiple monomials
Q = @(alpha,p,N) 2^N/prod(p)*(~any(mod(alpha,2),2)).*prod(gamma(div_ap(alpha+1,p)),2)./gamma(sum(div_ap(alpha+1,p),2)+1);

% compute volume of lp_ball
volBp = Q(zeros(1,N),p,N);

% generate identity matrix
E = eye(N);

% compute matrix EX:= E[x*x.']
EX = diag(Q(2*eye(N),p,N))/volBp;
if nargout == 1
    return;
end

% compute matrix EX1:= E[ x.'* V(W*A*x) ]
for d = 0:D
    for n = 1:N
        if d == 0
            % use faster evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % alpha = zeros(1,N);
            c = 1;
        else
            % use faster evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % [ucoeffs,alphac{d+1}] = multinom(U(n,:),d,'descend');
            % bcoeffs = multinom_coeff(size(U(n,:),2),d,'descend').';
            ucoeffs = prod(repmat(U(n,:),size(alphac{d+1},1),1).^kron(alphac{d+1},ones(1,1)),2).';
            bcoeffs = reshape(factorial(d)./prod(factorial(alphac{d+1}),2),1,size(alphac{d+1},1));
            c = ucoeffs.*bcoeffs;
        end
        EX1(n,d+1) = c*Q(alphac{d+1}+ones(size(alphac{d+1},1),1)*E(n,:),p,N)/volBp;
    end
end

% compute matrix EX2:=E[ V(U*x).'*V(U*x) ]
for d = 0:2*D
    for n = 1:N
        if d == 0
            % speedup evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % alpha = zeros(1,N);
            c = 1;
        else
            % use faster evaluation of sum of multinomials with precomputed
            % alpha; expression is similar to
            % [ucoeffs,alphac{d+1}] = multinom(U(n,:),d,'descend');
            % bcoeffs = multinom_coeff(size(U(n,:),2),d,'descend').';
            ucoeffs = prod(repmat(U(n,:),size(alphac{d+1},1),1).^kron(alphac{d+1},ones(1,1)),2).';
            bcoeffs = reshape(factorial(d)./prod(factorial(alphac{d+1}),2),1,size(alphac{d+1},1));
            c = ucoeffs.*bcoeffs;
        end
        EX2_tmp1(d+1,n) = c*Q(alphac{d+1},p,N)/volBp;
    end
end
EX2_tmp2 = sum(EX2_tmp1,2);
EX2 = hankel(EX2_tmp2(1:D+1),EX2_tmp2(D+1:2*D+1));

end

